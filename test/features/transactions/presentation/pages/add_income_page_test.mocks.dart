// Mocks generated by Mockito 5.4.6 from annotations
// in money_mate/test/features/transactions/presentation/pages/add_income_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:money_mate/features/transactions/domain/usecases/add_transaction_usecase.dart'
    as _i6;
import 'package:money_mate/features/transactions/domain/usecases/delete_transaction_usecase.dart'
    as _i8;
import 'package:money_mate/features/transactions/domain/usecases/get_total_by_type_usecase.dart'
    as _i9;
import 'package:money_mate/features/transactions/domain/usecases/get_transaction_by_id_usecase.dart'
    as _i5;
import 'package:money_mate/features/transactions/domain/usecases/get_transactions_by_category_usecase.dart'
    as _i4;
import 'package:money_mate/features/transactions/domain/usecases/get_transactions_by_date_range_usecase.dart'
    as _i3;
import 'package:money_mate/features/transactions/domain/usecases/get_transactions_usecase.dart'
    as _i2;
import 'package:money_mate/features/transactions/domain/usecases/update_transaction_usecase.dart'
    as _i7;
import 'package:money_mate/features/transactions/presentation/bloc/transaction_bloc.dart'
    as _i11;
import 'package:money_mate/features/transactions/presentation/bloc/transaction_event.dart'
    as _i13;
import 'package:money_mate/features/transactions/presentation/bloc/transaction_state.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTransactionsUseCase_0 extends _i1.SmartFake
    implements _i2.GetTransactionsUseCase {
  _FakeGetTransactionsUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTransactionsByDateRangeUseCase_1 extends _i1.SmartFake
    implements _i3.GetTransactionsByDateRangeUseCase {
  _FakeGetTransactionsByDateRangeUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTransactionsByCategoryUseCase_2 extends _i1.SmartFake
    implements _i4.GetTransactionsByCategoryUseCase {
  _FakeGetTransactionsByCategoryUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTransactionByIdUseCase_3 extends _i1.SmartFake
    implements _i5.GetTransactionByIdUseCase {
  _FakeGetTransactionByIdUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddTransactionUseCase_4 extends _i1.SmartFake
    implements _i6.AddTransactionUseCase {
  _FakeAddTransactionUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTransactionUseCase_5 extends _i1.SmartFake
    implements _i7.UpdateTransactionUseCase {
  _FakeUpdateTransactionUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTransactionUseCase_6 extends _i1.SmartFake
    implements _i8.DeleteTransactionUseCase {
  _FakeDeleteTransactionUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTotalByTypeUseCase_7 extends _i1.SmartFake
    implements _i9.GetTotalByTypeUseCase {
  _FakeGetTotalByTypeUseCase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionState_8 extends _i1.SmartFake
    implements _i10.TransactionState {
  _FakeTransactionState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionBloc extends _i1.Mock implements _i11.TransactionBloc {
  MockTransactionBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTransactionsUseCase get getTransactions => (super.noSuchMethod(
        Invocation.getter(#getTransactions),
        returnValue: _FakeGetTransactionsUseCase_0(
          this,
          Invocation.getter(#getTransactions),
        ),
      ) as _i2.GetTransactionsUseCase);

  @override
  _i3.GetTransactionsByDateRangeUseCase get getTransactionsByDateRange =>
      (super.noSuchMethod(
        Invocation.getter(#getTransactionsByDateRange),
        returnValue: _FakeGetTransactionsByDateRangeUseCase_1(
          this,
          Invocation.getter(#getTransactionsByDateRange),
        ),
      ) as _i3.GetTransactionsByDateRangeUseCase);

  @override
  _i4.GetTransactionsByCategoryUseCase get getTransactionsByCategory =>
      (super.noSuchMethod(
        Invocation.getter(#getTransactionsByCategory),
        returnValue: _FakeGetTransactionsByCategoryUseCase_2(
          this,
          Invocation.getter(#getTransactionsByCategory),
        ),
      ) as _i4.GetTransactionsByCategoryUseCase);

  @override
  _i5.GetTransactionByIdUseCase get getTransactionById => (super.noSuchMethod(
        Invocation.getter(#getTransactionById),
        returnValue: _FakeGetTransactionByIdUseCase_3(
          this,
          Invocation.getter(#getTransactionById),
        ),
      ) as _i5.GetTransactionByIdUseCase);

  @override
  _i6.AddTransactionUseCase get addTransaction => (super.noSuchMethod(
        Invocation.getter(#addTransaction),
        returnValue: _FakeAddTransactionUseCase_4(
          this,
          Invocation.getter(#addTransaction),
        ),
      ) as _i6.AddTransactionUseCase);

  @override
  _i7.UpdateTransactionUseCase get updateTransaction => (super.noSuchMethod(
        Invocation.getter(#updateTransaction),
        returnValue: _FakeUpdateTransactionUseCase_5(
          this,
          Invocation.getter(#updateTransaction),
        ),
      ) as _i7.UpdateTransactionUseCase);

  @override
  _i8.DeleteTransactionUseCase get deleteTransaction => (super.noSuchMethod(
        Invocation.getter(#deleteTransaction),
        returnValue: _FakeDeleteTransactionUseCase_6(
          this,
          Invocation.getter(#deleteTransaction),
        ),
      ) as _i8.DeleteTransactionUseCase);

  @override
  _i9.GetTotalByTypeUseCase get getTotalByType => (super.noSuchMethod(
        Invocation.getter(#getTotalByType),
        returnValue: _FakeGetTotalByTypeUseCase_7(
          this,
          Invocation.getter(#getTotalByType),
        ),
      ) as _i9.GetTotalByTypeUseCase);

  @override
  _i10.TransactionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTransactionState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.TransactionState);

  @override
  _i12.Stream<_i10.TransactionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i12.Stream<_i10.TransactionState>.empty(),
      ) as _i12.Stream<_i10.TransactionState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i13.TransactionEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.TransactionEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.TransactionState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.TransactionEvent>(
    _i14.EventHandler<E, _i10.TransactionState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i13.TransactionEvent, _i10.TransactionState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void onChange(_i14.Change<_i10.TransactionState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TransactionBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionBlocCustom extends _i1.Mock
    implements _i11.TransactionBloc {
  MockTransactionBlocCustom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTransactionsUseCase get getTransactions => (super.noSuchMethod(
        Invocation.getter(#getTransactions),
        returnValue: _FakeGetTransactionsUseCase_0(
          this,
          Invocation.getter(#getTransactions),
        ),
      ) as _i2.GetTransactionsUseCase);

  @override
  _i3.GetTransactionsByDateRangeUseCase get getTransactionsByDateRange =>
      (super.noSuchMethod(
        Invocation.getter(#getTransactionsByDateRange),
        returnValue: _FakeGetTransactionsByDateRangeUseCase_1(
          this,
          Invocation.getter(#getTransactionsByDateRange),
        ),
      ) as _i3.GetTransactionsByDateRangeUseCase);

  @override
  _i4.GetTransactionsByCategoryUseCase get getTransactionsByCategory =>
      (super.noSuchMethod(
        Invocation.getter(#getTransactionsByCategory),
        returnValue: _FakeGetTransactionsByCategoryUseCase_2(
          this,
          Invocation.getter(#getTransactionsByCategory),
        ),
      ) as _i4.GetTransactionsByCategoryUseCase);

  @override
  _i5.GetTransactionByIdUseCase get getTransactionById => (super.noSuchMethod(
        Invocation.getter(#getTransactionById),
        returnValue: _FakeGetTransactionByIdUseCase_3(
          this,
          Invocation.getter(#getTransactionById),
        ),
      ) as _i5.GetTransactionByIdUseCase);

  @override
  _i6.AddTransactionUseCase get addTransaction => (super.noSuchMethod(
        Invocation.getter(#addTransaction),
        returnValue: _FakeAddTransactionUseCase_4(
          this,
          Invocation.getter(#addTransaction),
        ),
      ) as _i6.AddTransactionUseCase);

  @override
  _i7.UpdateTransactionUseCase get updateTransaction => (super.noSuchMethod(
        Invocation.getter(#updateTransaction),
        returnValue: _FakeUpdateTransactionUseCase_5(
          this,
          Invocation.getter(#updateTransaction),
        ),
      ) as _i7.UpdateTransactionUseCase);

  @override
  _i8.DeleteTransactionUseCase get deleteTransaction => (super.noSuchMethod(
        Invocation.getter(#deleteTransaction),
        returnValue: _FakeDeleteTransactionUseCase_6(
          this,
          Invocation.getter(#deleteTransaction),
        ),
      ) as _i8.DeleteTransactionUseCase);

  @override
  _i9.GetTotalByTypeUseCase get getTotalByType => (super.noSuchMethod(
        Invocation.getter(#getTotalByType),
        returnValue: _FakeGetTotalByTypeUseCase_7(
          this,
          Invocation.getter(#getTotalByType),
        ),
      ) as _i9.GetTotalByTypeUseCase);

  @override
  _i10.TransactionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTransactionState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.TransactionState);

  @override
  _i12.Stream<_i10.TransactionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i12.Stream<_i10.TransactionState>.empty(),
      ) as _i12.Stream<_i10.TransactionState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i13.TransactionEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.TransactionEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.TransactionState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.TransactionEvent>(
    _i14.EventHandler<E, _i10.TransactionState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i13.TransactionEvent, _i10.TransactionState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void onChange(_i14.Change<_i10.TransactionState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
